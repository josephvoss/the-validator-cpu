What does an assembler even do?
	Translate Vasm code into basic machine code

What is Vasm?
	Test name for the language that I'm developing rn
	Assembly, each line translates directly to machine code

If it's so low-level, whats the point of it?
	Writing machine code by hand is incredibly tedieous.
	Instead of hardcoding address, use variable names as alias
	Also, can define repetative code in a function

//Whitespace significant? Can parse lines by ';' instead of '/n'?


Steps the assembler goes through
	Read in each command ('\n' or ';' terminated)
	Translates command to machine code
	Look-up variable names, sub in with values and address when needed
	Write each command line, (command with values/addresses in binary)
		to a binary file

CPU needs to be modified to
	differentiate between RAM and ROM/non-volatile RAM
	add MMU - currently can only support 8 bit memory addresses
	other stuff probably

Vasm syntax

	lbl first; //set this address of this location to first, start of the executable + line number; rn assume start of exec is 0
	mov 5 regA; //stores 5 into register A
	add regA 0 regB; //copies register A into register B
	add regA 3 regA; //adds 3 to register A

	sub regA regB regC;
	mov regC 0x4f; //store regC into a disk value. Should the address be a variable name?

	sub regB regA regC

	jfl regC first; //check if regC < 0; go to first if true;

Potential modifications to vasm
	- Variable names? Initialize each with int, store 9 bit address. Do after a basic assembler is built
	- Define functions?
	- characters/floating point values-currently only handles integer math

Detailed assembler flowchart
	Open file, getline
	parse line, if doesn't end in ; error
	split line into words by white spaces, if more than 3 words error
	command will be 3 characters long, if not error. Enter partial switch for commands to parse variable names, rightt # of var per line
		store variable names in a map/nested vector/something which can match name to address
	full command switch, translate command to machine code, translate variable names to address.

ADD DEREFERNCE OPERATOR. how? variable names get translated to addresses, but still should be treated as values.
	All commands can take addresses as input though, no dereference command necessary
