What does an assembler even do?
	Translate Vasm code into basic machine code

What is Vasm?
	Test name for the language that I'm developing rn
	Assembly, each line translates directly to machine code

If it's so low-level, whats the point of it?
	Writing machine code by hand is incredibly tedieous.
	Instead of hardcoding address, use variable names as alias
	Also, can define repetative code in a function

//Whitespace significant? Can parse lines by ';' instead of '/n'?


Steps the assembler goes through
	Read in each command ('\n' or ';' terminated)
	Translates command to machine code
	Look-up variable names, sub in with values and address when needed
	Write each command line, (command with values/addresses in binary)
		to a binary file

CPU needs to be modified to
	differentiate between RAM and ROM/non-volatile RAM
	add MMU - currently can only support 8 bit memory addresses
	other stuff probably

Vasm syntax

	Label first; //set this address of this location to first, start of the executable + line number; rn assume start of exec is 0
	int aValue = 1; //stores 1 into a new address referenced by aValue. aValue now has an address that stores a value
	int bValue = 2;
	add aValue bValue; //Add aValue and bValue, store result in ACC
	mov ACC &aValue; //Copy value from ACC and store it in the same location as aValue
	sub aValue ACC; //set ACC to a 'unknown value' in this case 0;
	int compareValue = ACC; //set compareValue to ACC, too complex? If so
	int compareValue;
	mov ACC &compareValue;
	jfl compareValue first; //check if compareValue < 0; go to first if true;

Potential modifications to vasm
	- Have add & sub be teritary: store value in third value
		could just define this in vasm and not modify the CPU code at all, add with 3 values calls a function
	- Define functions?
	- characters/floating point values-currently only handles integer math

Detailed assembler flowchart
	Open file, getline
	parse line, if doesn't end in ; error
	split line into words by white spaces, if more than 3 words error
	command will be 3 characters long, if not error. Enter partial switch for commands to parse variable names, rightt # of var per line
		store variable names in a map/nested vector/something which can match name to address
	full command switch, translate command to machine code, translate variable names to address.

ADD DEREFERNCE OPERATOR. how? variable names get translated to addresses, but still should be treated as values.
	All commands can take addresses as input though, no dereference command necessary
