11/2/15
Previously had structured vasm commands off a mixture of the little assembly I know and the commands I saw necessary. Currently the cpu only has one internal data register, and all values are read into it from ram. After skimming through a intro to computer science textbook realized that CPU have multiple internal data registers to be able to store memory off of disk and then perform operations on that. Solves an IO port issue I had, 8 bit address bus means that hardly any data can be accessed, but can't have a command sentence with like 40 bits. In LC-3, used internal registers in the command words, and commands to load in and write out data to memory from the registers. Next step is to redo the structure of the command sentence and the format for each operation, to account for internal data register usages instead of reading/writing to disk every instruction cycle. 
Side note: still looking into what boards to use. ElbertV2 is great for protyping development but I need something with MUCH more I/O ports. Preferably a built in UART would be nice, but seperate programmers would be acceptable. Xilinix boards are also prefered, seeing as I just figured out their IDE, but if something else is cheaper and better I'll switch in a heartbeat.
Also still thinking about what memory chips to use. Permenant flash storage can be used with SPI, but seems slow. Static ram chips can be used with individual pins for addresses. I'll try to use just the 16 bit address space with the RAM for now, but it might need upgrading to a MMU later. Flash spi definetly needs an MMU from the start though, can barely store any files much less a kernel on 2**16 bytes
